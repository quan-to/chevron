package pages

import (
	"github.com/quan-to/chevron/models"
	"html/template"
	"net/http"
)

const addPrivateKeyHTML = `
<html>
    <head>
        <title>Chevron - Add Private Key</title>
    </head>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="/assets/css/bootstrap.min.css">

    <!-- Optional theme -->
    <link rel="stylesheet" href="/assets/css/bootstrap-theme.min.css">
    <script type="text/javascript">
        window.onload = function () {
            var textAreas = document.getElementsByTagName('textarea');

            Array.prototype.forEach.call(textAreas, function(elem) {
                elem.placeholder = elem.placeholder.replace(/\\n/g, '\n');
            });
        };

        function postKey(data) {
            fetch('/keyRing/addPrivateKey', {
                method: 'post',
                body: JSON.stringify(data)
            }).then(function(response) {
                return response.json();
            }).then(function(data) {
                if (data.errorCode) {
                    setError(data.message);
                } else {
                    setInfo("Added key " + data.FingerPrint);
                    clearFields();
                }
                enableButton();
            }).catch(function(err) {
                setError(err);
                enableButton();
            })
        }

        function clearFields() {
            document.getElementById('gpgkey').value = "";
            document.getElementById('savetodisk').checked = false;
            document.getElementById('password').value = "";
        }

        function hideMessages() {
            const em = document.getElementById('error-message');
            const im = document.getElementById('info-message');
            em.style.display = "none";
            im.style.display = "none";
        }

        function disableButton() {
            document.getElementById('addbutton').disabled = true;
        }

        function enableButton() {
            document.getElementById('addbutton').disabled = false;
        }

        function setError(text) {
            const em = document.getElementById('error-message');
            em.innerHTML = text;
            em.style.display = "block";
        }

        function setInfo(text) {
            const im = document.getElementById('info-message');
            im.innerHTML = text;
            im.style.display = "block";
        }

        function addPrivateKey() {
            hideMessages();
            disableButton();
            const gpgKey = document.getElementById('gpgkey').value;
            const saveToDisk = document.getElementById('savetodisk').checked;
            const password = document.getElementById('password').value;

            const jsonData = {
                EncryptedPrivateKey: gpgKey,
                SaveToDisk: saveToDisk,
                Password: password,
            };

            postKey(jsonData);
        }
    </script>
    <style>
        #centerblock {
            min-height: 90%;  /* Fallback for browsers do NOT support vh unit */
            min-height: 90vh; /* These two lines are counted as one :-)       */
            min-width: 100%;
            min-width: 100vh;

            display: flex;
            align-items: center;
            justify-content: center;
        }
        #block {
            width: 600px;
        }
        .messages {
            width: 100%;
            margin: 0 0 0 0;
            padding: 10px 10px 10px 10px;
            size: 24px;
            text-align: center;
        }
    </style>
    <body>
        <div class="container-fluid">
            <div class="row">
                    <div>
                        <p id="info-message" class="bg-success messages" style="display: none">info</p>
                        <p id="error-message" class="bg-danger messages" style="display: none">error</p>
                    </div>
                <div id="centerblock">
                    <form id="block">
                        <div class="form-group">
                            <blockquote class="info">
                                Use this form to add a private key to your Remote Signer instance
                            </blockquote>
                            <label for="gpgkey">GPG Key:</label><br/>
                            <textarea placeholder="-----BEGIN PGP PRIVATE KEY BLOCK-----\nVersion: GnuPG v2\nComment: Generated by Chevron\n\n...\n-----END PGP PRIVATE KEY BLOCK-----" rows="10" class="form-control" name="gpgkey" id="gpgkey"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="password">Key Password (Optional):</label>
                            <input type="password" name="password" id="password">
                        </div>
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" id="savetodisk" name="savetodisk"> Save To Disk
                            </label>
                        </div>
                        <center>
                            <input value="Add Private Key" onClick="addPrivateKey()" type="button" id="addbutton" class="btn btn-default">
                        </center>
                    </form>
                </div>
            </div>
        </div>
    </body>
</html>
`

var addPrivateKeyTemplate = template.Must(template.New("addPrivateKey").Parse(addPrivateKeyHTML))

// ServeAddPrivateKey serves the AddPrivateKey HTML Page Template
func ServeAddPrivateKey(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", models.MimeHTML)
	w.WriteHeader(200)
	_ = addPrivateKeyTemplate.Execute(w, nil)
}
