/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/quan-to/chevron/tools/wrappers */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for LoadKey */
struct LoadKey_return {
	int r0; /* err */
	int r1; /* loadedPrivateKeys */
};

// LoadKey loads a private or public key into the memory keyring
extern struct LoadKey_return LoadKey(char* keyData, char* result, int resultLen);

// UnlockKey unlocks a private key to be used
extern int UnlockKey(char* fingerprint, char* password, char* result, int resultLen);

// VerifySignature verifies a signature using a already loaded public key
extern int VerifySignature(char* data, int dataLen, char* signature, char* result, int resultLen);

// QuantoVerifySignature verifies a signature in Quanto Signature Format using a already loaded public key
extern int QuantoVerifySignature(char* data, int dataLen, char* signature, char* result, int resultLen);

// VerifyBase64DataSignature verifies a signature using a already loaded public key. The b64data is a raw binary data encoded in base64 string
extern int VerifyBase64DataSignature(char* b64data, char* signature, char* result, int resultLen);

// QuantoVerifyBase64DataSignature verifies a signature in Quanto Signature Format using a already loaded public key.
// The b64data is a raw binary data encoded in base64 string
extern int QuantoVerifyBase64DataSignature(char* b64data, char* signature, char* result, int resultLen);

// SignData signs data using a already loaded and unlocked private key
extern int SignData(char* data, int dataLen, char* fingerprint, char* result, int resultLen);

// QuantoSignData signs data using a already loaded and unlocked private key and returns in Quanto Signature Format
extern int QuantoSignData(char* data, int dataLen, char* fingerprint, char* result, int resultLen);

// SignBase64Data signs data using a already loaded and unlocked private key.
// The b64data is a raw binary data encoded in base64 string
extern int SignBase64Data(char* b64data, char* fingerprint, char* result, int resultLen);

// SignBase64Data signs data using a already loaded and unlocked private key. Returns in Quanto Signature Format
// The b64data is a raw binary data encoded in base64 string
extern int QuantoSignBase64Data(char* b64data, char* fingerprint, char* result, int resultLen);

// GetKeyFingerprints returns all fingerprints in CSV format from a ASCII Armored PGP Keychain
extern int GetKeyFingerprints(char* keyData, char* result, int resultLen);

// ChangeKeyPassword re-encrypts the input key using newPassword
extern int ChangeKeyPassword(char* keyData, char* currentPassword, char* newPassword, char* result, int resultLen);

// GetPublicKey returns the cached public key from the specified fingerprint
extern int GetPublicKey(char* fingerprint, char* result, int resultLen);

// GenerateKey generates a new key using specified bits and identifier and encrypts it using the specified password
extern int GenerateKey(char* password, char* identifier, int bits, char* result, int resultLen);

#ifdef __cplusplus
}
#endif
