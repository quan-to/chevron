/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/quan-to/chevron/tools/wrappers */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for LoadKey */
struct LoadKey_return {
	int r0; /* err */
	int r1; /* loadedPrivateKeys */
};

// LoadKey loads a private or public key into the memory keyring

extern struct LoadKey_return LoadKey(char* p0, char* p1, int p2);

// UnlockKey unlocks a private key to be used

extern int UnlockKey(char* p0, char* p1, char* p2, int p3);

// VerifySignature verifies a signature using a already loaded public key

extern int VerifySignature(char* p0, int p1, char* p2, char* p3, int p4);

// QuantoVerifySignature verifies a signature in Quanto Signature Format using a already loaded public key

extern int QuantoVerifySignature(char* p0, int p1, char* p2, char* p3, int p4);

// VerifyBase64DataSignature verifies a signature using a already loaded public key. The b64data is a raw binary data encoded in base64 string

extern int VerifyBase64DataSignature(char* p0, char* p1, char* p2, int p3);

// QuantoVerifyBase64DataSignature verifies a signature in Quanto Signature Format using a already loaded public key.
// The b64data is a raw binary data encoded in base64 string

extern int QuantoVerifyBase64DataSignature(char* p0, char* p1, char* p2, int p3);

// SignData signs data using a already loaded and unlocked private key

extern int SignData(char* p0, int p1, char* p2, char* p3, int p4);

// QuantoSignData signs data using a already loaded and unlocked private key and returns in Quanto Signature Format

extern int QuantoSignData(char* p0, int p1, char* p2, char* p3, int p4);

// SignBase64Data signs data using a already loaded and unlocked private key.
// The b64data is a raw binary data encoded in base64 string

extern int SignBase64Data(char* p0, char* p1, char* p2, int p3);

// SignBase64Data signs data using a already loaded and unlocked private key. Returns in Quanto Signature Format
// The b64data is a raw binary data encoded in base64 string

extern int QuantoSignBase64Data(char* p0, char* p1, char* p2, int p3);

// GetKeyFingerprints returns all fingerprints in CSV format from a ASCII Armored PGP Keychain

extern int GetKeyFingerprints(char* p0, char* p1, int p2);

// ChangeKeyPassword re-encrypts the input key using newPassword

extern int ChangeKeyPassword(char* p0, char* p1, char* p2, char* p3, int p4);

// GetPublicKey returns the cached public key from the specified fingerprint

extern int GetPublicKey(char* p0, char* p1, int p2);

// GenerateKey generates a new key using specified bits and identifier and encrypts it using the specified password

extern int GenerateKey(char* p0, char* p1, int p2, char* p3, int p4);

#ifdef __cplusplus
}
#endif
